- all properties are private so there will be getters/setters
- all methods are self explanatory
- some obvious methods/properties are omitted
- config details (ex. attackDamage amount) are undecided

+++++++++++++++++++++++++++++++++++++++++++++++++++
Game loop
    - make a world obj
    - make a window obj containing the world obj
    - run 60fps

GameWindow extends JFrame
    - just the window configs
    - void display()

World extends JPanel (implements Event listeners)
    - static int gravity
    - static int screenMargin
    - ArrayList<Item> displayedItems //items that can't do damage`
    - ArrayList<Item> activeItems //items that are able to create damage
    - Hero[] players
    - Block[] blocks

    - event listeners

++++++++++++++++++++++++++++++++++++++++++++++++++++
abstract Block
    - BufferedImage blockImage

TriangularBlock extends Block

RectBlock extends Block

Platform extends Block

MovingPlatform extends Platform
    - void move()
+++++++++++++++++++++++++++++++++++++++++++++++++++

Collision checking:
    - all collisions happen in the world
    - there might be methods of what to do onCollide()


//all collisions are done through iteration
//unless I wanna change it later

abstract Hero
    - int lightAttackPower
    - int heavyAttackPower
    - int nextWeapon
    - int downAcceleration
    - int xVel
    - int xMaxVel
    - int yVel
    - int yMaxVel
    - int damageTaken 
    - int numJumps
    - int direction

    - int stungTime 
        //can't move after getting hit
    - int attackLoadingTime
    - int attackRecoveryTime
        // higher damage attacks takes longer to load/recover  

    - Hashmap<string, int> hitBox
    - Hasmap<string, int> attackHitBox
    - Object curItem 
        //weapon or Item or null
    - HashMap<String, ArrayList<Image>> sprites
        //sprites of different actions
    
    // check curItem
    // calculated on speed and intersecting pos??
    - void lightAttack()    
    - void heavyAttack()

    - void takeDamage(int damage)
        //calculates damage taken + knockback
        //knockback depends on the this.damageTaken


    // all movements are based on time passed and not frame
    // move based on velocity and not keypressed 
    
    - void jump() (gravity/ jump height/no. of jumps)
    - void moveLeft()
    - void dmoveRight()
    - void dropDown() 
        //speeds down falling process
        //go down platforms
    - void dodge()
    - void dash()
    - void display()
    - boolean isDead()

    - void throwItem()
    - void pickUp(Item[] items) //iterate through all items

Ash extends Hero
    - has Sword and Wand
Bob extends Hero
    - has Hammer and Bow

+++++++++++++++++++++++++++++++++++++++++++++++++++


abstract Item
    - Hero owner;
    - Image sprite
    - throwingDamage
    - HashMap<String, int> hitbox
    - HashMap<String, int> disappear //timer for disappearing

    - boolean onPlayer 
        // if not on player
        // pickupable
        // check disappear timer
    - int[] pos

    - bool shouldDisappear()
    - void onPickUp()

    - void onThrow()
        - runThrowingAnimation() 
            //change position and stuff
        - abstract collide(Object thing) 
            // player, wall, or mines 
            // if collide with floor -> stop moving and start disappearTimer

///////////////
interface Spawnable //able to spawn in the world
    - BufferedImage sprite

////////////////////////////
abstract Weapon extends Item
 
    - int damageOnPlayer
    - //does not 'do' damage themselves
    - //changes the state of the player once picked up (casts)

Bow extends Weapon

Sword extends Weapon

Wand extends Weapon

Hammer extends Weapon
/////////////////////////////

WeaponIcon implements Spawnable
       - int id //either the first type or second type of weapon


///////////////////////////

Mine extends Item implements Spawnable
    // if collide with block stay there
SpikeBall extends Item

Horn extends Item implements Spawnable
    callFire()
    //if j is pressed, rather than throwing, it spawns fire

Bomb extends Item implements Spawnable

+++++++++++++++++++++++++++++++++++++++++++

interface CircleCollidable
    - int getX()
    - int getY()
    - int getRadius()

interface RectCollidable
    - int getX()
    - int getY()
    - int getWidth()
    - int getHeight()

GeneralCollision
    - boolean intersects() //overloaded with different circle/rect combo